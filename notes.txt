###################### 15th May 2020, 19:03 #######################

Developing it final for production, lets see how it goes.
    ** Inital startpoint is rtcbot multi-client server script with modified JS, referenced from Keyboard controller
       modified its JS with event listener on Buttons for Open/Close. 
       Commands Open/Close reaching the remote.

###################################################################


##################### 16th May 2020, 02:55 ########################

Multi-Threaded asyncio tested successfully. Asyncio Socket-WebRtc running in background  thread t1. 
Subsequent threads will be used for other processes.
    **Handling Asyncio with multi-threading has been referenced from StackOverflow link,
    https://stackoverflow.com/questions/26270681/can-an-asyncio-event-loop-run-in-the-background-without-suspending-the-python-in

Getting response from Arduino, for its GPIO pin state.

TODO: 1. Define a successfull transaction --> DONE
      2. Recording 

###################################################################

#################### 17th May 2020, 05:37 #########################

Defined a successfull transaction.
install boto3, imutils, JSON_minify via pip
When Arduino not connected error pops --> sudo chmod a+rw /dev/ttyUSB0
Recording and Uploading to S3 for once when the video webrtc is ON after transaction gets completed, however in 2nd loop, 
webrtc needs to be connected again for Recording video again.

TODO: Solve Bugs
Bug --> Rec only one transaction ------- because trans flag is not being zero again

Bug --> socket Connection need to be refreshed after each successfull transaction. -------- found solution will be addressed.

Bug --> socket Connection need to be refreshed after each page refreshed. --------- No need for change in frontend

###################################################################

################## 19th May 2020, 03:00 ###########################

Currently in test.py, the complete start and stop control for the Socket and WebRtc Connection thread has been established.

ToDO:
    1. Socket Connection and WebRtc has to be programmatically stopped and started again at the end of each successfull
       transaction. --> DONE
    2. System to be made dynamic for Recording video only when live feed is accessed and till the transaction completes.
       And this should run in dynamic loop so that box once switched ON can handle all the transactions in same way. --> DONE
    3. Integrate all in remote_box.py --> Not required, now all in parcello.py

##################################################################

################## 20th May 2020, 04:48 ##########################

All backgroud set for controlling the socket and rtc connection, rec, resp, uploading, ard communication all integrated
in new file parcello.py, however still the loop asyncio loop is running only once thus other tasks like rec and uploading
are not efficiently happening, which gave rise to a very severe bug in remote_box.py file, but now a solution approach
to the bug is in mind and has been partially tested in test.py file. Next task for yesterday's TODO points 1,2,3
is to pack the flow with global vars in parcello.py to make the flow continous and dynamic.

Resting here,
##################################################################

################# 22nd May 2020, 04:59 ###########################

I wanna try a bit different move, may be its in the right direction, making a new branch dev.

So, the idea to control start and stop of the socket webrtc connection using global variables  goes flop completely. 
Any external input is required for the session to start and stop or stopping could even be scheduled.
Session needs to be defined for each WebRtc connection based on any external input that may come from another Socket
server or MQTT subscription. Simulation may be made by using user input via console but needs to be tested.

TODO: 
    1. Define a session and session timeout. --> DONE
    2. How to start and stop the session, Socket? MQtt? --> Still to think over, however hardcoded timeout for start/stop
       works for now.
    3. Once done, manage the flow. --> DONE
    4. Test with AWS uploads also. --> DONE

Resting Here.
#################################################################